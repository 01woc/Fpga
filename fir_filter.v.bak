
module fir(
    input clk,
    input reset,
    input [23:0] data_in,
    output [23:0] data_out
);

    // ROM Coefficients
    wire [7:0] rom[0:7];
    assign rom[0] = -8'sd9;   // -0.071809
    assign rom[1] = -8'sd8;   // -0.060553
    assign rom[2] =  8'sd12;  //  0.092332
    assign rom[3] =  8'sd39;  //  0.301742
    assign rom[4] =  8'sd51;  //  0.400000
    assign rom[5] =  8'sd39;  //  0.301742
    assign rom[6] =  8'sd12;  //  0.092332
    assign rom[7] = -8'sd8;   // -0.060553

    // Delay line for inputs
    reg [23:0] x1, x2, x3, x4, x5, x6, x7;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x1 <= 0; x2 <= 0; x3 <= 0; x4 <= 0;
            x5 <= 0; x6 <= 0; x7 <= 0;
        end else begin
            x1 <= data_in;
            x2 <= x1;
            x3 <= x2;
            x4 <= x3;
            x5 <= x4;
            x6 <= x5;
            x7 <= x6;
        end
    end

    // Extra pipeline registers for delayed x7
    reg [23:0] x7reg1, x7reg2, x7reg3, x7reg4, x7reg5;
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x7reg1 <= 0; x7reg2 <= 0; x7reg3 <= 0; x7reg4 <= 0; x7reg5 <= 0;
        end else begin
            x7reg1 <= x7;
            x7reg2 <= x7reg1;
            x7reg3 <= x7reg2;
            x7reg4 <= x7reg3;
            x7reg5 <= x7reg4;
        end
    end

    // Multiplier outputs
    reg [31:0] mul_out[0:7];
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            mul_out[0] <= 0; mul_out[1] <= 0; mul_out[2] <= 0; mul_out[3] <= 0;
            mul_out[4] <= 0; mul_out[5] <= 0; mul_out[6] <= 0; mul_out[7] <= 0;
        end else begin
            mul_out[0] <= rom[0] * data_in;
            mul_out[1] <= rom[1] * x2;
            mul_out[2] <= rom[2] * x4;
            mul_out[3] <= rom[3] * x6;
            mul_out[4] <= rom[4] * x7;
            mul_out[5] <= rom[5] * x7reg2;
            mul_out[6] <= rom[6] * x7reg4;
            mul_out[7] <= rom[7] * x7reg5;
        end
    end

    // Adder chain
    reg [35:0] add [0:7];
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            add[0] <= 0; add[1] <= 0; add[2] <= 0; add[3] <= 0;
            add[4] <= 0; add[5] <= 0; add[6] <= 0; add[7] <= 0;
        end else begin
            add[0] <= 36'd0 + mul_out[0];
            add[1] <= add[0] + mul_out[1];
            add[2] <= add[1] + mul_out[2];
            add[3] <= add[2] + mul_out[3];
            add[4] <= add[3] + mul_out[4];
            add[5] <= add[4] + mul_out[5];
            add[6] <= add[5] + mul_out[6];
            add[7] <= add[6] + mul_out[7];
        end
    end

    // Truncate or round to 24-bit output
    assign data_out = add[7][35:12];

endmodule

